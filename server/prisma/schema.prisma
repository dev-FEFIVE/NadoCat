generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BoardCategories {
  categoryId     Int              @id @unique(map: "category_id_UNIQUE") @default(autoincrement()) @map("category_id")
  category       String           @unique(map: "category_UNIQUE") @db.VarChar(20)
  communities    Communities[]
  events         Events[]
  likes          Likes[]
  missingReports MissingReports[]
  missings       Missings[]
  reports        Reports[]
  streetCats     StreetCats[]

  @@map("board_categories")
}

model Chats {
  chatId    Int        @id @unique(map: "chat_id_UNIQUE") @default(autoincrement()) @map("chat_id")
  chatName  String     @map("chat_name") @db.VarChar(45)
  uuid      Bytes      @db.Binary(16)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  users     Users      @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "chats_uuid_fk")
  messages  Messages[]

  @@index([uuid], map: "chats_uuid_fk_idx")
  @@map("chats")
}

model Communities {
  postId            Int                 @unique(map: "post_id_UNIQUE") @default(autoincrement()) @map("post_id")
  categoryId        Int                 @default(1) @map("category_id")
  title             String              @db.VarChar(100)
  content           String?             @db.LongText
  views             Int                 @default(0)
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.Timestamp(0)
  thumbnail         Int?
  uuid              Bytes               @db.Binary(16)
  boardCategories   BoardCategories     @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "communities_category_id_fk")
  users             Users               @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "communities_uuid_fk")
  communityComments CommunityComments[]
  communityImages   CommunityImages[]
  communityTags     CommunityTags[]

  @@id([postId, categoryId])
  @@index([categoryId])
  @@index([uuid], map: "communities_uuid_fk_idx")
  @@map("communities")
}

model CommunityComments {
  communityCommentId Int         @id @unique(map: "community_comment_id_UNIQUE") @default(autoincrement()) @map("community_comment_id")
  communityId        Int         @map("community_id")
  comment            String      @db.MediumText
  createdAt          DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime    @default(now()) @map("updated_at") @db.Timestamp(0)
  uuid               Bytes       @db.Binary(16)
  communities        Communities @relation(fields: [communityId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "community_comments_community_id_fk")
  users              Users       @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "community_comments_uuid_fk")

  @@index([communityId], map: "communities_community_id_fk_idx")
  @@index([uuid], map: "community_comments_uuid_fk_idx")
  @@map("community_comments")
}

model CommunityImages {
  imageId     Int         @id @unique(map: "image_id_UNIQUE") @default(autoincrement()) @map("image_id")
  postId      Int         @map("post_id")
  images      Images      @relation(fields: [imageId], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "community_images_image_id_fk")
  communities Communities @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "community_images_post_id_fk")

  @@index([postId], map: "community_images_post_id_fk_idx")
  @@map("community_images")
}

model CommunityTags {
  tagId       Int         @id @unique(map: "tag_id_UNIQUE") @default(autoincrement()) @map("tag_id")
  postId      Int         @map("post_id")
  communities Communities @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "community_tags_post_id_fk")
  tags        Tags        @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction, map: "community_tags_tag_id_fk")

  @@index([postId], map: "community_tags_post_id_fk_idx")
  @@map("community_tags")
}

model EventComments {
  eventCommentId Int      @id @unique(map: "event_comment_id_UNIQUE") @default(autoincrement()) @map("event_comment_id")
  eventId        Int      @map("event_id")
  comment        String   @db.MediumText
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamp(0)
  uuid           Bytes    @db.Binary(16)
  events         Events   @relation(fields: [eventId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "event_comments_event_id_fk")
  users          Users    @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "event_comments_uuid_fk")

  @@index([eventId], map: "event_comments_event_id_fk_idx")
  @@index([uuid], map: "event_comments_uuid_fk_idx")
  @@map("event_comments")
}

model EventImages {
  imageId Int    @id @map("image_id")
  postId  Int    @map("post_id")
  images  Images @relation(fields: [imageId], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "event_images_image_id_fk")
  events  Events @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "event_images_post_id_fk")

  @@index([postId], map: "event_images_post_id_fk_idx")
  @@map("event_images")
}

model EventTags {
  tagId  Int    @id @unique(map: "tag_id_UNIQUE") @default(autoincrement()) @map("tag_id")
  postId Int    @map("post_id")
  events Events @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "event_tags_post_id_fk")
  tags   Tags   @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction, map: "event_tags_tag_id_fk")

  @@index([postId], map: "event_tags_post_id_fk_idx")
  @@map("event_tags")
}

model Events {
  postId          Int             @unique(map: "post_id_UNIQUE") @default(autoincrement()) @map("post_id")
  categoryId      Int             @default(2) @map("category_id")
  title           String          @db.VarChar(100)
  isClosed        Int             @default(0) @map("is_closed") @db.TinyInt
  date            String          @db.VarChar(45)
  content         String          @db.LongText
  views           Int             @default(0)
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
  thumbnail       Int?
  uuid            Bytes           @db.Binary(16)
  eventComments   EventComments[]
  eventImages     EventImages[]
  eventTags       EventTags[]
  boardCategories BoardCategories @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "events_category_id_fk")
  images          Images?         @relation(fields: [thumbnail], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "events_thumbnail_fk")
  users           Users           @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "events_uuid_fk")

  @@id([postId, categoryId])
  @@index([categoryId], map: "events_category_id_fk_idx")
  @@index([thumbnail], map: "events_thumbnail_fk_idx")
  @@index([uuid], map: "events_uuid_fk_idx")
  @@map("events")
}

model Friends {
  friendId                       Int   @id @unique(map: "friend_id_UNIQUE") @default(autoincrement()) @map("friend_id")
  uuid                           Bytes @db.Binary(16)
  followingId                    Bytes @map("following_id") @db.Binary(16)
  usersFriendsFollowingIdTousers Users @relation("friends_following_idTousers", fields: [followingId], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "friends_following_id_fk")
  users_friends_uuidTousers      Users @relation("friends_uuidTousers", fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "friends_uuid_fk")

  @@index([followingId], map: "friends_following_id_fk_idx")
  @@index([uuid], map: "friends_uuid_fk_idx")
  @@map("friends")
}

model HomeCats {
  homeCatId    Int     @id @unique(map: "home_cat_id_UNIQUE") @default(autoincrement()) @map("home_cat_id")
  name         String  @db.VarChar(10)
  age          Int?
  gender       String? @db.Char(1)
  uuid         Bytes   @db.Binary(16)
  detail       String? @db.MediumText
  profileImage String? @map("profile_image") @db.VarChar(100)
  users        Users   @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "home_cats_uuid_fk")

  @@index([uuid], map: "home_cats_uuid_fk_idx")
  @@map("home_cats")
}

model Images {
  imageId         Int              @id @unique(map: "image_id_UNIQUE") @default(autoincrement()) @map("image_id")
  url             String           @db.VarChar(100)
  communityImages CommunityImages?
  eventImages     EventImages?
  events          Events[]
  missingReports  MissingReports[]
  missings        Missings[]
  streetCatImages StreetCatImages?
  streetCats      StreetCats[]

  @@map("images")
}

model Likes {
  postId          Int             @map("post_id")
  categoryId      Int             @map("category_id")
  uuid            Bytes           @db.Binary(16)
  boardCategories BoardCategories @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "likes_category_id_fk")
  users           Users           @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "likes_uuid_fk")

  @@id([postId, categoryId])
  @@index([categoryId], map: "likes_category_id_fk_idx")
  @@index([uuid], map: "likes_uuid_fk_idx")
  @@map("likes")
}

model Locations {
  locationId     Int              @id @unique(map: "idlocation_id_UNIQUE") @default(autoincrement()) @map("location_id")
  longitude      Float            @db.Float
  latitude       Float            @db.Float
  detail         String           @db.VarChar(100)
  missingReports MissingReports[]
  missings       Missings[]
  streetCats     StreetCats[]

  @@map("locations")
}

model Messages {
  messageId Int      @id @unique(map: "message_id_UNIQUE") @default(autoincrement()) @map("message_id")
  uuid      Bytes    @db.Binary(16)
  chatId    Int      @map("chat_id")
  content   String   @db.LongText
  sentAt    DateTime @map("sent_at") @db.Timestamp(0)
  chats     Chats    @relation(fields: [chatId], references: [chatId], onDelete: NoAction, onUpdate: NoAction, map: "messages_chat_id")
  users     Users    @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "messages_uuid_fk")

  @@index([chatId])
  @@index([uuid], map: "messages_uuid_fk_idx")
  @@map("messages")
}

model MissingFavorites {
  missingFavoriteId Int      @id @unique(map: "missing_favorite_id_UNIQUE") @default(autoincrement()) @map("missing_favorite_id")
  uuid              Bytes    @db.Binary(16)
  postId            Int      @map("post_id")
  missings          Missings @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "missing_favorites_post_id_fk")
  users             Users    @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "missing_favorites_uuid_fk")

  @@index([postId], map: "missing_favorites_post_id_fk_idx")
  @@index([uuid], map: "missing_favorites_uuid_fk_idx")
  @@map("missing_favorites")
}

model MissingReports {
  postId          Int             @unique(map: "post_id_UNIQUE") @default(autoincrement()) @map("post_id")
  categoryId      Int             @default(4) @map("category_id")
  missingId       Int             @map("missing_id")
  uuid            Bytes           @db.Binary(16)
  time            DateTime        @db.DateTime(0)
  locationId      Int             @map("location_id")
  detail          String?         @db.MediumText
  views           Int
  valified        Int             @default(0) @db.TinyInt
  match           Int             @default(0) @db.TinyInt
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  thumbnail       Int?
  boardCategories BoardCategories @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_category_id")
  locations       Locations       @relation(fields: [locationId], references: [locationId], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_location_id_fk")
  missings        Missings        @relation(fields: [missingId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_missing_id_fk")
  images          Images?         @relation(fields: [thumbnail], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "missint_reports_thumbnail_fk")
  users           Users           @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_uuid_fk")

  @@id([postId, categoryId])
  @@index([categoryId])
  @@index([locationId], map: "missing_reports_location_id_fk_idx")
  @@index([missingId])
  @@index([thumbnail], map: "missint_reports_thumbnail_fk_idx")
  @@index([uuid], map: "missing_reports_uuid_fk_idx")
  @@map("missing_reports")
}

model Missings {
  postId           Int                @unique(map: "post_id_UNIQUE") @default(autoincrement()) @map("post_id")
  categoryId       Int                @default(3) @map("category_id")
  uuid             Bytes              @db.Binary(16)
  catId            Int                @map("cat_id")
  time             DateTime?          @db.DateTime(0)
  locationId       Int?               @map("location_id")
  detail           String?            @db.LongText
  found            Int?               @default(0) @db.TinyInt
  views            Int                @default(0)
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime           @default(now()) @map("updated_at") @db.Timestamp(0)
  thumbnail        Int?
  missingFavorites MissingFavorites[]
  missingReports   MissingReports[]
  boardCategories  BoardCategories    @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "missings_category_id_fk")
  locations        Locations?         @relation(fields: [locationId], references: [locationId], onDelete: NoAction, onUpdate: NoAction, map: "missings_location_id_fk")
  images           Images?            @relation(fields: [thumbnail], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "missings_thumbnail_id_fk")
  users            Users              @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "missings_uuid_fk")

  @@id([postId, categoryId])
  @@index([categoryId], map: "missings_category_id_fk_idx")
  @@index([locationId], map: "missings_location_id_fk_idx")
  @@index([thumbnail], map: "missings_thumbnail_id_fk_idx")
  @@index([uuid], map: "missings_user_id_fk_idx")
  @@map("missings")
}

model NotificationTypes {
  notificationTypeId Int             @id @unique(map: "notification_type_id_UNIQUE") @default(autoincrement()) @map("notification_type_id")
  type               String          @unique(map: "type_UNIQUE") @db.VarChar(10)
  notifications      Notifications[]

  @@map("notification_types")
}

model Notifications {
  notificationId                      Int               @id @unique(map: "notification_id_UNIQUE") @default(autoincrement()) @map("notification_id")
  receiverId                          Bytes             @map("receiver_id") @db.Binary(16)
  senderId                            Bytes             @map("sender_id") @db.Binary(16)
  typeId                              Int               @map("type_id")
  url                                 String            @db.VarChar(100)
  isRead                              Int               @map("is_read") @db.TinyInt
  createdAt                           DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  usersNotificationsReceiverIdTousers Users             @relation("notifications_receiver_idTousers", fields: [receiverId], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "notifications_receiver_id_fk")
  usersNotificationsSenderIdTousers   Users             @relation("notifications_sender_idTousers", fields: [senderId], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "notifications_sender_id_fk")
  notificationTypes                   NotificationTypes @relation(fields: [typeId], references: [notificationTypeId], onDelete: NoAction, onUpdate: NoAction, map: "notifications_type_id_fk")

  @@index([senderId], map: "notifications_sender_id_fk_idx")
  @@index([typeId], map: "notifications_type_id_fk_idx")
  @@index([receiverId], map: "notifications_receiver_id_fk_idx")
  @@map("notifications")
}

model Reports {
  reportId        Int             @id @unique(map: "report_id_UNIQUE") @default(autoincrement()) @map("report_id")
  postId          Int             @map("post_id")
  categoryId      Int             @map("category_id")
  detail          String?         @db.VarChar(45)
  boardCategories BoardCategories @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "reports_category_id_fk")

  @@index([categoryId], map: "reports_category_id_fk_idx")
  @@map("reports")
}

model StreetCatComments {
  streetCatCommentId Int        @id @unique(map: "street_cat_comment_id_UNIQUE") @default(autoincrement()) @map("street_cat_comment_id")
  streetCatId        Int        @map("street_cat_id")
  uuid               Bytes      @db.Binary(16)
  comment            String     @db.MediumText
  createdAt          DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime?  @default(now()) @map("updated_at") @db.Timestamp(0)
  streetCats         StreetCats @relation(fields: [streetCatId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_comments_post_id_fk")
  users              Users      @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_comments_uuid_fk")

  @@index([streetCatId], map: "street_cat_comments_post_id_fk_idx")
  @@index([uuid], map: "street_cat_comments_uuid_fk_idx")
  @@map("street_cat_comments")
}

model StreetCatFavorites {
  uuid       Bytes      @db.Binary(16)
  postId     Int        @map("post_id")
  streetCats StreetCats @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_favorites_post_id_fk")
  users      Users      @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_favorites_uuid_fk")

  @@id([uuid, postId])
  @@index([postId], map: "street_cat_favorites_post_id_fk_idx")
  @@map("street_cat_favorites")
}

model StreetCatImages {
  imageId    Int        @id @unique(map: "image_id_UNIQUE") @default(autoincrement()) @map("image_id")
  postId     Int        @map("post_id")
  images     Images     @relation(fields: [imageId], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_images_image_id_fk")
  streetCats StreetCats @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_images_post_id_fk")

  @@index([postId], map: "street_cat_images_post_id_fk_idx")
  @@map("street_cat_images")
}

model StreetCatTags {
  tagId      Int        @id @unique(map: "tag_id_UNIQUE") @default(autoincrement()) @map("tag_id")
  postId     Int        @map("post_id")
  streetCats StreetCats @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_tags_post_id_fk")
  tags       Tags       @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_tags_tag_id_fk")

  @@index([postId], map: "street_cat_tags_post_id_fk_idx")
  @@map("street_cat_tags")
}

model StreetCats {
  postId             Int                  @unique(map: "post_id_UNIQUE") @default(autoincrement()) @map("post_id")
  categoryId         Int                  @default(5) @map("category_id")
  name               String?              @db.VarChar(10)
  gender             String               @db.VarChar(10)
  neutered           String               @db.VarChar(10)
  neuteringDate      DateTime?            @map("neutering_date") @db.Date
  discoveryDate      DateTime?            @map("discovery_date") @db.Date
  locationId         Int                  @map("location_id")
  content            String?              @db.LongText
  views              Int                  @default(0)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime             @default(now()) @map("updated_at") @db.Timestamp(0)
  thumbnail          Int?
  uuid               Bytes                @db.Binary(16)
  streetCatComments  StreetCatComments[]
  streetCatFavorites StreetCatFavorites[]
  streetCatImages    StreetCatImages[]
  streetCatTags      StreetCatTags[]
  boardCategories    BoardCategories      @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_category_id_fk")
  locations          Locations            @relation(fields: [locationId], references: [locationId], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_location_id_fk")
  images             Images?              @relation(fields: [thumbnail], references: [imageId], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_thumbnail_fk")
  users              Users                @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_uuid_fk")

  @@id([postId, categoryId])
  @@index([categoryId])
  @@index([locationId], map: "street_cats_location_id_fk_idx")
  @@index([thumbnail], map: "street_cats_thumbnail_fk_idx")
  @@index([uuid], map: "street_cats_uuid_fk_idx")
  @@map("street_cats")
}

model Tags {
  tagId         Int            @id @unique(map: "tag_id_UNIQUE") @default(autoincrement()) @map("tag_id")
  tag           String         @db.VarChar(20)
  communityTags CommunityTags?
  eventTags     EventTags?
  streetCatTags StreetCatTags?

  @@map("tags")
}

model UserOauthSecrets {
  userOauthSecretId Int    @id @unique(map: "user_oauth_secret_id_UNIQUE") @default(autoincrement()) @map("user_oauth_secret_id")
  uuid              Bytes  @db.Binary(16)
  accessToken       String @map("access_token") @db.VarChar(45)
  refreshToken      String @map("refresh_token") @db.VarChar(45)
  tokenExpiry       String @map("token_expiry") @db.VarChar(45)
  users             Users  @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "user_oauth_secrets_uuid_fk")

  @@index([uuid], map: "user_oauth_secrets_uuid_fk_idx")
  @@map("user_oauth_secrets")
}

model UserSecrets {
  userSecretId Int    @id @unique(map: "user_secret_id_UNIQUE") @default(autoincrement()) @map("user_secret_id")
  uuid         Bytes  @db.Binary(16)
  hashPassword String @map("hash_password") @db.VarChar(200)
  salt         String @db.VarChar(45)
  users        Users  @relation(fields: [uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction, map: "user_secrets_uuid_fk")

  @@index([uuid], map: "user_secrets_uuid_fk_idx")
  @@map("user_secrets")
}

model Users {
  id                                          Int                  @unique(map: "id_UNIQUE") @default(autoincrement())
  uuid                                        Bytes                @id @unique(map: "user_id_UNIQUE") @db.Binary(16)
  email                                       String               @unique(map: "email_UNIQUE") @db.VarChar(45)
  nickname                                    String               @db.VarChar(10)
  detail                                      String?              @db.MediumText
  authType                                    String               @map("auth_type") @db.VarChar(10)
  profileImage                                String?              @map("profile_image") @db.VarChar(100)
  createdAt                                   DateTime             @default(now()) @map("created_at") @db.Timestamp(0)
  status                                      String               @default("active") @db.VarChar(20)
  chats                                       Chats[]
  communities                                 Communities[]
  community_comments                          CommunityComments[]
  event_comments                              EventComments[]
  events                                      Events[]
  friendsFriendsFollowingIdTousers            Friends[]            @relation("friends_following_idTousers")
  friends_friends_uuidTousers                 Friends[]            @relation("friends_uuidTousers")
  home_cats                                   HomeCats[]
  likes                                       Likes[]
  messages                                    Messages[]
  missing_favorites                           MissingFavorites[]
  missing_reports                             MissingReports[]
  missings                                    Missings[]
  notificationsNotificationsReceiverIdTousers Notifications[]      @relation("notifications_receiver_idTousers")
  notificationsNotificationsSenderIdTousers   Notifications[]      @relation("notifications_sender_idTousers")
  street_cat_comments                         StreetCatComments[]
  street_cat_favorites                        StreetCatFavorites[]
  street_cats                                 StreetCats[]
  user_oauth_secrets                          UserOauthSecrets[]
  user_secrets                                UserSecrets[]

  @@map("users")
}
