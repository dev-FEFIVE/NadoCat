generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model board_categories {
  category_id     Int               @id @unique(map: "category_id_UNIQUE") @default(autoincrement())
  category        String            @unique(map: "category_UNIQUE") @db.VarChar(20)
  communities     communities[]
  events          events[]
  likes           likes[]
  missing_reports missing_reports[]
  missings        missings[]
  reports         reports[]
  street_cats     street_cats[]
}

model chats {
  chat_id    Int        @id @unique(map: "chat_id_UNIQUE") @default(autoincrement())
  chat_name  String     @db.VarChar(45)
  user_id    String     @db.VarChar(45)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  users      users      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "chats_user_id_fk")
  messages   messages[]

  @@index([user_id], map: "chats_user_id_fk_idx")
}

model communities {
  post_id            Int                  @unique(map: "post_id_UNIQUE") @default(autoincrement())
  category_id        Int                  @default(1)
  title              String               @db.VarChar(100)
  content            String?              @db.LongText
  views              Int                  @default(0)
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  updated_at         DateTime             @default(now()) @db.Timestamp(0)
  thumbnail          Int?
  user_id            String               @db.VarChar(45)
  board_categories   board_categories     @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "communities_category_id_fk")
  users              users                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "communities_user_id_fk")
  community_comments community_comments[]
  community_images   community_images[]
  community_tags     community_tags[]

  @@id([post_id, category_id])
  @@index([category_id])
  @@index([user_id], map: "communities_user_id_fk_idx")
}

model community_comments {
  community_comment_id Int         @id @unique(map: "community_comment_id_UNIQUE") @default(autoincrement())
  community_id         Int
  comment              String      @db.MediumText
  created_at           DateTime    @default(now()) @db.Timestamp(0)
  updated_at           DateTime    @default(now()) @db.Timestamp(0)
  user_id              String      @db.VarChar(45)
  communities          communities @relation(fields: [community_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "community_comments_community_id_fk")
  users                users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "community_comments_user_id_fk")

  @@index([community_id], map: "communities_community_id_fk_idx")
  @@index([user_id], map: "community_comments_user_id_fk_idx")
}

model community_images {
  image_id    Int         @id @unique(map: "image_id_UNIQUE") @default(autoincrement())
  post_id     Int
  images      images      @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "community_images_image_id_fk")
  communities communities @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "community_images_post_id_fk")

  @@index([post_id], map: "community_images_post_id_fk_idx")
}

model community_tags {
  tag_id      Int         @id @unique(map: "tag_id_UNIQUE") @default(autoincrement())
  post_id     Int
  communities communities @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "community_tags_post_id_fk")
  tags        tags        @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction, map: "community_tags_tag_id_fk")

  @@index([post_id], map: "community_tags_post_id_fk_idx")
}

model event_comments {
  event_comment_id Int      @id @unique(map: "event_comment_id_UNIQUE") @default(autoincrement())
  event_id         Int
  comment          String   @db.MediumText
  created_at       DateTime @default(now()) @db.Timestamp(0)
  updated_at       DateTime @default(now()) @db.Timestamp(0)
  user_id          String   @db.VarChar(45)
  events           events   @relation(fields: [event_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "event_comments_event_id_fk")
  users            users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "event_comments_user_id_fk")

  @@index([event_id], map: "event_comments_event_id_fk_idx")
  @@index([user_id], map: "event_comments_user_id_fk_idx")
}

model event_images {
  image_id Int     @id
  post_id  Int?
  images   images  @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "event_images_image_id_fk")
  events   events? @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "event_images_post_id_fk")

  @@index([post_id], map: "event_images_post_id_fk_idx")
}

model event_tags {
  tag_id  Int    @id @unique(map: "tag_id_UNIQUE") @default(autoincrement())
  post_id Int
  events  events @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "event_tags_post_id_fk")
  tags    tags   @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction, map: "event_tags_tag_id_fk")

  @@index([post_id], map: "event_tags_post_id_fk_idx")
}

model events {
  post_id          Int              @unique(map: "post_id_UNIQUE") @default(autoincrement())
  category_id      Int              @default(2)
  title            String           @db.VarChar(100)
  is_closed        Int              @default(0) @db.TinyInt
  date             String           @db.VarChar(45)
  content          String           @db.LongText
  views            Int              @default(0)
  created_at       DateTime         @default(now()) @db.Timestamp(0)
  updated_at       DateTime         @default(now()) @db.Timestamp(0)
  thumbnail        Int?
  user_id          String           @db.VarChar(45)
  event_comments   event_comments[]
  event_images     event_images[]
  event_tags       event_tags[]
  board_categories board_categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "events_category_id_fk")
  images           images?          @relation(fields: [thumbnail], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "events_thumbnail_fk")
  users            users            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "events_user_id_fk")

  @@id([post_id, category_id])
  @@index([category_id], map: "events_category_id_fk_idx")
  @@index([thumbnail], map: "events_thumbnail_fk_idx")
  @@index([user_id])
}

model friends {
  friend_id                         Int    @id @unique(map: "friend_id_UNIQUE") @default(autoincrement())
  user_id                           String @db.VarChar(45)
  following_id                      String @db.VarChar(45)
  users_friends_following_idTousers users  @relation("friends_following_idTousers", fields: [following_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "friends_following_id_fk")
  users_friends_user_idTousers      users  @relation("friends_user_idTousers", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "friends_user_id_fk")

  @@index([following_id], map: "friends_following_id_fk_idx")
  @@index([user_id])
}

model home_cats {
  home_cat_id   Int     @id @unique(map: "home_cat_id_UNIQUE") @default(autoincrement())
  name          String  @db.VarChar(10)
  age           Int?
  gender        String? @db.Char(1)
  user_id       String  @db.VarChar(45)
  detail        String? @db.MediumText
  profile_image String? @db.VarChar(100)
  users         users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "home_cats_user_id_fk")

  @@index([user_id], map: "home_cats_users_id_idx")
}

model images {
<<<<<<< HEAD
  image_id         Int               @id @unique(map: "image_id_UNIQUE") @default(autoincrement())
  url              String            @db.VarChar(100)
  community_images community_images?
  event_images     event_images?
  events           events[]
  missing_reports  missing_reports[]
  missings         missings[]
  street_cats      street_cats[]
=======
  image_id          Int                @id @unique(map: "image_id_UNIQUE") @default(autoincrement())
  url               String             @db.VarChar(100)
  community_images  community_images?
  event_images      event_images?
  events            events[]
  missing_reports   missing_reports[]
  missings          missings[]
  street_cat_images street_cat_images?
  street_cats       street_cats[]
>>>>>>> upstream/develop
}

model likes {
  post_id          Int
  category_id      Int
  user_id          String           @db.VarChar(45)
  board_categories board_categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "likes_category_id_fk")
  users            users            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "likes_user_id_fk")

  @@id([post_id, category_id])
  @@index([category_id], map: "likes_category_id_fk_idx")
  @@index([user_id], map: "likes_user_id_fk_idx")
}

model locations {
  location_id     Int               @id @unique(map: "idlocation_id_UNIQUE") @default(autoincrement())
  longitude       Float             @db.Float
  latitude        Float             @db.Float
  detail          String            @db.VarChar(100)
  missing_reports missing_reports[]
  missings        missings[]
  street_cats     street_cats[]
}

model messages {
  message_id Int      @id @unique(map: "message_id_UNIQUE") @default(autoincrement())
  user_id    String   @db.VarChar(45)
  chat_id    Int
  content    String   @db.LongText
  sent_at    DateTime @db.Timestamp(0)
  chats      chats    @relation(fields: [chat_id], references: [chat_id], onDelete: NoAction, onUpdate: NoAction, map: "messages_chat_id")
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "messages_user_id")

  @@index([chat_id])
  @@index([user_id])
}

model missing_favorites {
  missing_favorite_id Int      @id @unique(map: "missing_favorite_id_UNIQUE") @default(autoincrement())
  user_id             String   @db.VarChar(45)
  post_id             Int
  missings            missings @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "missing_favorites_post_id_fk")
  users               users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "missing_favorites_user_id_fk")

  @@index([post_id], map: "missing_favorites_post_id_fk_idx")
  @@index([user_id], map: "missing_favorites_user_id_fk_idx")
}

model missing_reports {
  post_id          Int              @unique(map: "post_id_UNIQUE") @default(autoincrement())
  category_id      Int              @default(4)
  missing_id       Int
  user_id          String           @db.VarChar(45)
  time             DateTime         @db.DateTime(0)
  location_id      Int
  detail           String?          @db.MediumText
  views            Int
  valified         Int              @default(0) @db.TinyInt
  match            Int              @default(0) @db.TinyInt
  created_at       DateTime         @default(now()) @db.Timestamp(0)
  thumbnail        Int?
  board_categories board_categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_category_id")
  locations        locations        @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_location_id_fk")
  missings         missings         @relation(fields: [missing_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_missing_id_fk")
  users            users            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "missing_reports_user_id_fk")
  images           images?          @relation(fields: [thumbnail], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "missint_reports_thumbnail_fk")

  @@id([post_id, category_id])
  @@index([category_id])
  @@index([location_id], map: "missing_reports_location_id_fk_idx")
  @@index([missing_id])
  @@index([user_id], map: "missing_reports_user_id_fk_idx")
  @@index([thumbnail], map: "missint_reports_thumbnail_fk_idx")
}

model missings {
  post_id           Int                 @unique(map: "post_id_UNIQUE") @default(autoincrement())
  category_id       Int                 @default(3)
  user_id           String              @db.VarChar(45)
  cat_id            Int
  time              DateTime?           @db.DateTime(0)
  location_id       Int?
  detail            String?             @db.LongText
  found             Int?                @default(0) @db.TinyInt
  views             Int                 @default(0)
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  updated_at        DateTime            @default(now()) @db.Timestamp(0)
  thumbnail         Int?
  missing_favorites missing_favorites[]
  missing_reports   missing_reports[]
  board_categories  board_categories    @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "missings_category_id_fk")
  locations         locations?          @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "missings_location_id_fk")
  images            images?             @relation(fields: [thumbnail], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "missings_thumbnail_id_fk")
  users             users               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "missings_user_id_fk")

  @@id([post_id, category_id])
  @@index([category_id], map: "missings_category_id_fk_idx")
  @@index([location_id], map: "missings_location_id_fk_idx")
  @@index([thumbnail], map: "missings_thumbnail_id_fk_idx")
  @@index([user_id], map: "missings_user_id_fk_idx")
}

model notification_types {
  notification_type_id Int             @id @unique(map: "notification_type_id_UNIQUE") @default(autoincrement())
  type                 String          @unique(map: "type_UNIQUE") @db.VarChar(10)
  notifications        notifications[]
}

model notifications {
  notification_id                        Int                @id @unique(map: "notification_id_UNIQUE") @default(autoincrement())
  receiver_id                            String             @db.VarChar(45)
  sender_id                              String             @db.VarChar(45)
  type_id                                Int
  url                                    String             @db.VarChar(100)
  is_read                                Int                @db.TinyInt
  created_at                             DateTime           @default(now()) @db.Timestamp(0)
  users_notifications_receiver_idTousers users              @relation("notifications_receiver_idTousers", fields: [receiver_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_receiver_id_fk")
  users_notifications_sender_idTousers   users              @relation("notifications_sender_idTousers", fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_sender_id_fk")
  notification_types                     notification_types @relation(fields: [type_id], references: [notification_type_id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_type_id_fk")

  @@index([receiver_id])
  @@index([sender_id], map: "notifications_sender_id_fk_idx")
  @@index([type_id], map: "notifications_type_id_fk_idx")
}

model reports {
  report_id        Int              @id @unique(map: "report_id_UNIQUE") @default(autoincrement())
  post_id          Int
  category_id      Int
  detail           String?          @db.VarChar(45)
  board_categories board_categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "reports_category_id_fk")

  @@index([category_id], map: "reports_category_id_fk_idx")
}

model street_cat_comments {
  street_cat_comment_id Int         @id @unique(map: "street_cat_comment_id_UNIQUE") @default(autoincrement())
  street_cat_id         Int
  user_id               String      @db.VarChar(45)
  comment               String      @db.MediumText
  created_at            DateTime    @default(now()) @db.Timestamp(0)
  updated_at            DateTime?   @default(now()) @db.Timestamp(0)
  street_cats           street_cats @relation(fields: [street_cat_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_comments_post_id_fk")
  users                 users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_comments_user_id_fk")

  @@index([street_cat_id], map: "street_cat_comments_post_id_fk_idx")
  @@index([user_id], map: "street_cat_comments_user_id_fk_idx")
}

model street_cat_favorites {
  user_id     String      @db.VarChar(45)
  post_id     Int
  street_cats street_cats @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_favorites_post_id_fk")
  users       users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_favorites_user_id_fk")

  @@id([user_id, post_id])
  @@index([post_id], map: "street_cat_favorites_post_id_fk_idx")
}

model street_cat_images {
  image_id    Int         @id @unique(map: "image_id_UNIQUE") @default(autoincrement())
  post_id     Int
  images      images      @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_images_image_id_fk")
  street_cats street_cats @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_images_post_id_fk")

  @@index([post_id], map: "street_cat_images_post_id_fk_idx")
}

model street_cat_tags {
  tag_id      Int         @id @unique(map: "tag_id_UNIQUE") @default(autoincrement())
  post_id     Int
  street_cats street_cats @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_tags_post_id_fk")
  tags        tags        @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cat_tags_tag_id_fk")

  @@index([post_id], map: "street_cat_tags_post_id_fk_idx")
}

model street_cats {
  post_id              Int                    @unique(map: "post_id_UNIQUE") @default(autoincrement())
  category_id          Int                    @default(5)
  name                 String?                @db.VarChar(10)
  gender               String                 @db.VarChar(10)
  neutered             String                 @db.VarChar(10)
  neutering_date       DateTime?              @db.Date
  discovery_date       DateTime?              @db.Date
  location_id          Int
  content              String?                @db.LongText
  views                Int                    @default(0)
  created_at           DateTime               @default(now()) @db.Timestamp(0)
  updated_at           DateTime               @default(now()) @db.Timestamp(0)
  thumbnail            Int?
  user_id              String                 @db.VarChar(45)
  street_cat_comments  street_cat_comments[]
  street_cat_favorites street_cat_favorites[]
  street_cat_images    street_cat_images[]
  street_cat_tags      street_cat_tags[]
  board_categories     board_categories       @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_category_id_fk")
  locations            locations              @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_location_id_fk")
  images               images?                @relation(fields: [thumbnail], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_thumbnail_fk")
  users                users                  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "street_cats_user_id_fk")

  @@id([post_id, category_id])
  @@index([category_id])
  @@index([location_id], map: "street_cats_location_id_fk_idx")
  @@index([thumbnail], map: "street_cats_thumbnail_fk_idx")
  @@index([user_id], map: "street_cats_user_id_fk_idx")
}

model tags {
<<<<<<< HEAD
  tag_id         Int             @id @unique(map: "tag_id_UNIQUE") @default(autoincrement())
  tag            String          @db.VarChar(20)
  community_tags community_tags?
  event_tags     event_tags?
=======
  tag_id          Int              @id @unique(map: "tag_id_UNIQUE") @default(autoincrement())
  tag             String           @db.VarChar(20)
  community_tags  community_tags?
  event_tags      event_tags?
  street_cat_tags street_cat_tags?
>>>>>>> upstream/develop
}

model user_oauth_secrets {
  user_oauth_secret_id Int    @id @unique(map: "user_oauth_secret_id_UNIQUE") @default(autoincrement())
  user_id              String @unique(map: "user_id_UNIQUE") @db.VarChar(45)
  access_token         String @db.VarChar(45)
  refresh_token        String @db.VarChar(45)
  token_expiry         String @db.VarChar(45)
  users                users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_oauth_secrets_user_id_fk")
}

model user_secrets {
  user_secret_id Int    @id @unique(map: "user_secret_id_UNIQUE") @default(autoincrement())
  user_id        String @db.VarChar(45)
  hash_password  String @db.VarChar(45)
  salt           String @db.VarChar(45)
  users          users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_secrets_user_id_fk")

  @@index([user_id], map: "user_secrets_fk_idx")
}

model users {
  id                                             Int                    @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id                                        String                 @id @unique(map: "user_id_UNIQUE") @db.VarChar(45)
  email                                          String                 @unique(map: "email_UNIQUE") @db.VarChar(45)
  nickname                                       String                 @db.VarChar(10)
  detail                                         String?                @db.MediumText
  auth_type                                      String                 @db.VarChar(10)
  profile_image                                  String?                @db.VarChar(100)
  created_at                                     DateTime               @default(now()) @db.Timestamp(0)
  status                                         String                 @default("active") @db.VarChar(20)
  chats                                          chats[]
  communities                                    communities[]
  community_comments                             community_comments[]
  event_comments                                 event_comments[]
  events                                         events[]
  friends_friends_following_idTousers            friends[]              @relation("friends_following_idTousers")
  friends_friends_user_idTousers                 friends[]              @relation("friends_user_idTousers")
  home_cats                                      home_cats[]
  likes                                          likes[]
  messages                                       messages[]
  missing_favorites                              missing_favorites[]
  missing_reports                                missing_reports[]
  missings                                       missings[]
  notifications_notifications_receiver_idTousers notifications[]        @relation("notifications_receiver_idTousers")
  notifications_notifications_sender_idTousers   notifications[]        @relation("notifications_sender_idTousers")
  street_cat_comments                            street_cat_comments[]
  street_cat_favorites                           street_cat_favorites[]
  street_cats                                    street_cats[]
  user_oauth_secrets                             user_oauth_secrets?
  user_secrets                                   user_secrets[]
}
